<html>
  <head>
    <title>Playground</title>
  </head>
  <body>

    <div id="main-container"></div>

  </body>

  <script src="build/third-party/jquery.min.js"></script>
  <script src="build/third-party/d3.min.js"></script>
  <script src="build/third-party/d3.boxplot.js"></script>
  <script src="build/third-party/plotly-latest.min.js"></script>
  <link  href="build/third-party/toggle-switch.css" rel="stylesheet" />

  <script src="build/modules/Chart.js"></script>
  <link  href="build/modules/Chart.css" rel="stylesheet" />
  <script src="build/modules/ClimateChart.js"></script>
  <script src="build/modules/DistributionChart.js"></script>
  <link  href="build/modules/DistributionChart.css" rel="stylesheet" />
  <script src="build/modules/AvailabilityChart.js"></script>
  <link  href="build/modules/AvailabilityChart.css" rel="stylesheet" />

  <script src="build/modules/DOMElementCreator.js"></script>

  <script src="build/modules/main.js"></script>



  <script>
  var climateData = {"name":"Weimar, Thuringia, Germany","location":{"orig":{"lat":50.98682075063399,"lng":11.320263817906381},"DD":"50.987E, 11.32N","DMS":"Position 50 59 13 N 11 19 13 E"},"hemisphere":"N","elevation":"227 m","climate_class":"Cfb","years":[1970,1998,null],"source":"dx.doi.org/10.5285/4c7fdfa6-f176-4c58-acee-683d5e9d2ed5","source_link":"http://dx.doi.org/10.5285/4c7fdfa6-f176-4c58-acee-683d5e9d2ed","doi":null,"prec":[{"raw_data":[33.3,12.3,10.4,32.3,22.4,19.1,94.3,33.5,15.9,30.9,30.7,44.8,32.1,40.3,45.9,25.9,44.4,59.4,30.5,17.9,16.3,22.5,22.8,56,42.3,58.6,1.7,16.4,25.7],"num_gaps":0,"sum":32.366},{"raw_data":[64.6,22,2.5,30.7,37,22.7,9,38.6,19.1,30.1,28.4,17,3.8,26.3,54.2,11.5,18.2,40.2,56.7,21,55.8,15.9,15.5,13.5,27.2,46.8,30.3,53.4,13.2],"num_gaps":0,"sum":28.455},{"raw_data":[30.8,16.7,39.2,17.3,28.6,35.3,14.6,60.7,25.4,89.6,21.9,50.1,19.1,32.8,7.1,27.4,66,57.9,84.6,40.8,22,20.5,88.3,11.4,55.4,28.8,19,60.1,34.7],"num_gaps":0,"sum":38.141},{"raw_data":[71.7,38.2,41.1,38.9,14.6,47.4,19.4,38.5,18.6,38.1,60.9,57.7,23.7,125.4,63.8,23.8,50.8,24.8,21.2,56.9,51.5,26.6,27.2,18.9,91.3,50.7,29.9,34.8,43.8],"num_gaps":0,"sum":43.11},{"raw_data":[71.5,58.8,63.6,49.7,66.4,48.9,47.2,22.4,79.2,34.3,28.1,68.3,42.3,91.6,126.9,42.9,82.8,92.7,21.6,25.5,15.3,26.5,26.3,76.8,80.1,72.2,76.3,38.1,52.7],"num_gaps":0,"sum":56.172},{"raw_data":[49.9,73.8,103.2,44.9,87.3,95.5,44.3,92.2,32.3,64.8,61,48.3,46.4,27.2,61.7,63.5,43.8,103.5,79.5,54.5,104.6,74.8,76.2,70.3,41.8,75.6,64.5,34.6,55.3],"num_gaps":0,"sum":64.666},{"raw_data":[64.9,11.1,100.4,65.4,61.3,32.5,43.5,69.8,50.6,64.6,65.1,53,57.9,28.8,80.3,51.3,53.7,74.4,62.8,56.2,20.7,53.6,125.4,131.7,82.8,113.4,86,70.5,74.8],"num_gaps":0,"sum":65.741},{"raw_data":[112.7,51.1,96,29.2,56.7,51,23.7,136.1,68.5,21.8,25.7,109.6,32.2,63,64.7,48.6,68,62.4,25.4,24.3,49.1,61.2,56.5,31.9,89.8,49.8,102.9,38.4,35.4],"num_gaps":0,"sum":58.128},{"raw_data":[27.9,26.1,25.9,52.2,31.1,33.9,40.8,25.8,69.8,62.9,49,60.2,9.7,48.3,63.3,24.4,54.4,88.1,31.9,42.1,45.5,24,26,45.5,47.7,86.7,27.3,13.2,94.7],"num_gaps":0,"sum":44.083},{"raw_data":[61.9,34.7,27.6,66,99.1,36.7,27.2,41.5,32.3,14.9,43.7,64.9,55.4,7,48.5,3.6,59.5,23.3,19.9,39.3,22.1,13.7,41.5,48.2,32.2,10.6,59.8,52.8,117.5],"num_gaps":0,"sum":41.566},{"raw_data":[40.9,59.4,43.7,22.8,29,28.2,41.8,89.3,6.9,57.5,36.2,58.4,14,21.4,43.3,38.7,10.3,53.4,53,56.8,59.5,24.7,71,31.1,49.6,26.8,48.9,25.6,57.6],"num_gaps":0,"sum":41.372},{"raw_data":[37.1,17.8,2.7,39.3,76.9,8.4,12,40.1,66.2,53.7,29.8,67.3,28.2,16.8,17.5,50.5,45.9,36.6,69.7,51.6,34.7,47.7,45.7,92.8,37.1,30.1,43.8,45.8,9.9],"num_gaps":0,"sum":39.852}],"temp":[{"raw_data":[-3.8,-2.6,-3.9,-0.9,2.8,4,0.5,-0.3,0,-5.5,-4,-2.8,-3.6,3.3,0.5,-6.5,-0.5,-7.4,2.7,1.5,1.5,1,0.1,1.2,2.3,-0.9,-4.9,-4,1.5],"num_gaps":0,"mean":-0.99},{"raw_data":[-1.6,0.6,1.1,0.3,2.5,0.2,-0.3,2.5,-2.3,-3.2,2,-1.3,-1.2,-2.4,-1.2,-4.4,-8.4,-1.6,1.2,2.3,5.4,-3.2,2.1,-2.5,-0.8,4,-3.1,3.5,3.7],"num_gaps":0,"mean":-0.21},{"raw_data":[0.8,0.4,5,3.6,5.2,3.4,0.5,6.1,5,3.2,2.7,6.9,4,4.5,1.4,2.4,2.8,-2.3,2.2,6.8,6.9,6.4,4.4,3.4,6.4,2.7,0.1,5.6,4.7],"num_gaps":0,"mean":3.628},{"raw_data":[5.2,7.6,6.8,4.5,7.3,6.5,6.2,5.3,6.2,6,5.5,7,6.1,8.4,6.1,7.4,5.8,8.8,7.4,7,6.7,6.7,7.5,10.5,7.9,8.2,8,5.7,8.9],"num_gaps":0,"mean":6.938},{"raw_data":[10.8,13.3,11.1,12.1,10.2,11.5,12.6,10.8,10.9,12.1,9.8,12.7,12.4,11.1,10.1,12.6,14.5,9.3,13.9,13.4,13.4,9.2,14.2,14.6,12.6,11.7,10.6,12.5,13.4],"num_gaps":0,"mean":11.979},{"raw_data":[16.6,13.3,14.3,15.5,13.5,14,16.7,15.1,14.2,16.7,14.4,15.3,16.2,15.8,13.4,12.9,15.3,13.5,14.8,14.8,15,13.5,16.7,15.5,16.2,13.8,15,15.4,16.4],"num_gaps":0,"mean":14.959},{"raw_data":[15.7,17.7,17.1,16.6,14.8,17.8,19.2,15.9,15.2,14.7,14.5,15.9,18.9,19.9,15.2,16.9,16.8,16.5,17.1,17.3,16.2,19.3,18.1,16,21.3,19.6,15.1,16.4,15.9],"num_gaps":0,"mean":16.952},{"raw_data":[16.1,17.9,15.1,17.5,16.8,18.5,15.6,15.4,14.7,15.2,16.6,15.8,17.8,17.6,16.7,16.1,16.3,15,17.4,17,18.6,17.7,19.2,16,17.7,17.8,16.5,19.3,16.7],"num_gaps":0,"mean":16.848},{"raw_data":[13.1,11.7,10.3,14.2,13.1,15.5,12.6,11.6,11.9,12.9,13.8,13.7,16.6,13.5,12,13.5,10.8,14.5,13.4,14.6,11.6,15.3,12.9,11.7,13,12.1,10,13.6,12.9],"num_gaps":0,"mean":12.979},{"raw_data":[8.3,8.2,5.7,6.6,4.7,6.7,8.8,9.6,8.5,7.5,7.5,8,9.4,8.9,9.9,8,9.3,8.6,9.3,10.3,9.6,7.7,5.8,7.1,6.8,11.2,8.3,6.8,7.8],"num_gaps":0,"mean":8.1},{"raw_data":[5.3,2.9,3.5,2.9,4.4,2.2,4.2,4.7,3.1,2.7,2.1,4.2,5.8,2.6,3.9,0,5.3,3.9,2.4,2.1,4.5,3.4,4.8,-0.9,5.5,1.8,3.9,3.3,0.8],"num_gaps":0,"mean":3.286},{"raw_data":[-0.3,3,-0.8,-0.8,4.4,0.5,-1.3,0.9,-0.5,3.2,0,-3.4,1.6,-0.6,0.3,3.4,1.5,0.9,2.5,1.8,0.1,-0.3,0.2,2.5,3,-3.1,-4.3,1,0],"num_gaps":0,"mean":0.531}],"temp_mean":7.92,"prec_sum":553.65,"monthly_short":[{"monthIdx":0,"month":"Jan","temp":-0.99,"prec":32.366},{"monthIdx":1,"month":"Feb","temp":-0.21,"prec":28.455},{"monthIdx":2,"month":"Mar","temp":3.628,"prec":38.141},{"monthIdx":3,"month":"Apr","temp":6.938,"prec":43.11},{"monthIdx":4,"month":"May","temp":11.979,"prec":56.172},{"monthIdx":5,"month":"Jun","temp":14.959,"prec":64.666},{"monthIdx":6,"month":"Jul","temp":16.952,"prec":65.741},{"monthIdx":7,"month":"Aug","temp":16.848,"prec":58.128},{"monthIdx":8,"month":"Sep","temp":12.979,"prec":44.083},{"monthIdx":9,"month":"Oct","temp":8.1,"prec":41.566},{"monthIdx":10,"month":"Nov","temp":3.286,"prec":41.372},{"monthIdx":11,"month":"Dec","temp":0.531,"prec":39.852}],"extreme":{"minTemp":-0.99,"maxTemp":16.952,"minPrec":28.455,"maxPrec":65.741}}

  climateData.temp_long = []
  for (var month of climateData.temp)
    climateData.temp_long.push(month.raw_data)
  climateData.prec_long = []
  for (var month of climateData.prec)
    climateData.prec_long.push(month.raw_data)

  // Get climate data and min/max values (0: temp, 1: prec)
  var vizData = []
  var vizMin = []
  var vizMax = []

  // For each data type (temp and prec)
  for (var datatypeIdx = 0; datatypeIdx <= 1; datatypeIdx++)
  {
    // Create empty arrays
    vizData[datatypeIdx] = []
    vizMin[datatypeIdx] = +Infinity
    vizMax[datatypeIdx] = -Infinity

    // For each month
    for (var monthIdx = 0; monthIdx < MONTHS_IN_YEAR.length; monthIdx++)
    {
      // Create empty array
      vizData[datatypeIdx][monthIdx] = []

      // Name month
      vizData[datatypeIdx][monthIdx][0] = MONTHS_IN_YEAR[monthIdx]

      // Get data values
      var values = null
      if (datatypeIdx == 0)       // Temp
        values = climateData.temp_long[monthIdx]
      else if (datatypeIdx == 1)  // Prec
        values = climateData.prec_long[monthIdx]
      vizData[datatypeIdx][monthIdx][1] = values

      // For each value
      for (var valueIdx = 0; valueIdx < values.length; valueIdx++)
      {
        var value = values[valueIdx]
        if (value > vizMax[datatypeIdx]) vizMax[datatypeIdx] = value
    		if (value < vizMin[datatypeIdx]) vizMin[datatypeIdx] = value
      }
    }
  }

  console.log(vizData, vizMin, vizMax);


  var labels = true; // show the text labels beside individual boxplots?

  var margin = {top: 30, right: 50, bottom: 70, left: 50};
  var  width = 800 - margin.left - margin.right;
  var height = 400 - margin.top - margin.bottom;

  var min = Infinity,
      max = -Infinity;

  // parse in the data
  d3.csv("build/modules/data.csv", function(error, csv) {
  	// using an array of arrays with
  	// data[n][2]
  	// where n = number of columns in the csv file
  	// data[i][0] = name of the ith column
  	// data[i][1] = array of values of ith column

  	var data = [];
  	data[0] = [];
  	data[1] = [];
  	data[2] = [];
  	data[3] = [];
  	// add more rows if your csv file has more columns

  	// add here the header of the csv file
  	data[0][0] = "Q1";
  	data[1][0] = "Q2";
  	data[2][0] = "Q3";
  	data[3][0] = "Q4";
  	// add more rows if your csv file has more columns

  	data[0][1] = [];
  	data[1][1] = [];
  	data[2][1] = [];
  	data[3][1] = [];

  	csv.forEach(function(x) {
  		var v1 = Math.floor(x.Q1),
  			v2 = Math.floor(x.Q2),
  			v3 = Math.floor(x.Q3),
  			v4 = Math.floor(x.Q4);
  			// add more variables if your csv file has more columns

  		var rowMax = Math.max(v1, Math.max(v2, Math.max(v3,v4)));
  		var rowMin = Math.min(v1, Math.min(v2, Math.min(v3,v4)));

  		data[0][1].push(v1);
  		data[1][1].push(v2);
  		data[2][1].push(v3);
  		data[3][1].push(v4);
  		 // add more rows if your csv file has more columns

  		if (rowMax > max) max = rowMax;
  		if (rowMin < min) min = rowMin;
  	});

    console.log(data);
    console.log(vizData);

  	var chart = d3.boxplot()
  		.whiskers(iqr(1.5))
  		.height(height)
  		.domain([vizMin[0], vizMax[0]])
  		.showLabels(labels);

  	var svg = d3.select("body").append("svg")
  		.attr("width", width + margin.left + margin.right)
  		.attr("height", height + margin.top + margin.bottom)
  		.attr("class", "boxplot")
  		.append("g")
  		.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  	// the x-axis
  	var x = d3.scale.ordinal()
  		.domain( vizData[0].map(function(d) { return d[0] } ) )
  		.rangeRoundBands([0 , width], 0.7, 0.3);

  	var xAxis = d3.svg.axis()
  		.scale(x)
  		.orient("bottom");

  	// the y-axis
  	var y = d3.scale.linear()
  		.domain([vizMin[0], vizMax[0]])
  		.range([height + margin.top, 0 + margin.top]);

  	var yAxis = d3.svg.axis()
      .scale(y)
      .orient("left");

  	// draw the boxplots
  	svg.selectAll(".boxplot")
        .data(vizData[0])
  	  .enter().append("g")
  		.attr("transform", function(d) { return "translate(" +  x(d[0])  + "," + margin.top + ")"; } )
        .call(chart.width(x.rangeBand()));


  	// add a title
  	svg.append("text")
          .attr("x", (width / 2))
          .attr("y", 0 + (margin.top / 2))
          .attr("text-anchor", "middle")
          .style("font-size", "18px")
          //.style("text-decoration", "underline")
          .text("Revenue 2012");

  	 // draw y axis
  	svg.append("g")
          .attr("class", "y axis")
          .call(yAxis)
  		.append("text") // and text1
  		  .attr("transform", "rotate(-90)")
  		  .attr("y", 6)
  		  .attr("dy", ".71em")
  		  .style("text-anchor", "end")
  		  .style("font-size", "16px")
  		  .text("Revenue in €");

  	// draw x axis
  	svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + (height  + margin.top + 10) + ")")
        .call(xAxis)
  	  .append("text")             // text label for the x axis
          .attr("x", (width / 2) )
          .attr("y",  10 )
  		.attr("dy", ".71em")
          .style("text-anchor", "middle")
  		.style("font-size", "16px")
          .text("Quarter");
  });

  // Returns a function to compute the interquartile range.
  function iqr(k) {
    return function(d, i) {
      var q1 = d.quartiles[0],
          q3 = d.quartiles[2],
          iqr = (q3 - q1) * k,
          i = -1,
          j = d.length;
      while (d[++i] < q1 - iqr);
      while (d[--j] > q3 + iqr);
      return [i, j];
    };
  }

  </script>



</html>
